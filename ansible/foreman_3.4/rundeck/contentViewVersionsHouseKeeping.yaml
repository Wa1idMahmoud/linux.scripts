- defaultTab: nodes
  description: "Delete oldest Content Views   \nAnsible Playbook Template: https://github.com/joe-speedboat/linux.scripts/blob/master/ansible/foreman_contentViewVersionDelete.yml"
  executionEnabled: true
  group: Foreman
  id: 516e6583-e0d0-4052-8105-0f5defca7939
  loglevel: INFO
  name: contentViewVersionsHouseKeeping
  nodeFilterEditable: false
  notification:
    onfailure:
      email:
        attachLog: true
        attachLogInFile: true
        recipients: admin@domain.tld
    onsuccess:
      email:
        attachLog: true
        attachLogInFile: true
        recipients: admin@domain.tld
  notifyAvgDurationThreshold: null
  options:
  - description: Never delete no ContentViews if newer than x days
    name: ProtectDays
    regex: \d+
    required: true
    value: '30'
  plugins:
    ExecutionLifecycle: null
  schedule:
    month: '*'
    time:
      hour: '08'
      minute: '08'
      seconds: '0'
    weekday:
      day: '1'
    year: '*'
  scheduleEnabled: true
  sequence:
    commands:
    - configuration:
        ansible-become: 'false'
        ansible-extra-vars: |
          ---
          contentViewName: 'cv_rhel9'
          failIfEmpty: False
          doDebug: False
          protectDays: "@option.ProtectDays@"
        ansible-playbook-inline: "---\n# Copyright (c) Chris Ruettimann <chris@bitbull.ch>\n\
          # This software is licensed to you under the GNU General Public License.\n\
          # There is NO WARRANTY for this software, express or\n# implied, including\
          \ the implied warranties of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR\
          \ PURPOSE. You should have received a copy of GPLv2\n# along with this software;\
          \ if not, see\n# http://www.gnu.org/licenses/gpl.txt\n# -----------------------------------------------------------------------\n\
          # This playbook is used to delete a specific version of a content view in\
          \ Foreman.\n# It first retrieves all versions of the content view, checks\
          \ if any version has no assigned CVS,\n# and if so, deletes the version\
          \ with the lowest id.\n# \n# Foreman API DOC: https://foreman.domain.tld/apidoc\n\
          # -----------------------------------------------------------------------\n\
          # Variables:\n# - validate_certs: Whether to validate SSL certificates.\
          \ Set to False if using self-signed certificates.\n# - foremanUser: The\
          \ username to authenticate with Foreman API.\n# - foremanPassword: The password\
          \ to authenticate with Foreman API.\n# - foremanUrl: The URL of the Foreman\
          \ server.\n# - contentViewName: The name of the content view to delete a\
          \ version from.\n# - failIfEmpty: Whether to fail the playbook if there\
          \ are no versions to delete.\n# - doDebug: Whether to print debug information.\n\
          # - protectDays: Never delete ContentViewVersion if newer than x days\n\
          # -----------------------------------------------------------------------\n\
          - hosts: localhost\n  gather_facts: yes\n#  vars:\n#    validate_certs:\
          \ False\n#    foremanUser: 'admin'\n#    foremanPassword: 'xxx'\n#    foremanUrl:\
          \ 'https://foreman.domain.tld'\n#    contentViewName: 'cv_rhel9'\n#    failIfEmpty:\
          \ False\n#    doDebug: True\n#    protectDays: 90\n  tasks:\n    - name:\
          \ Calculate the date protectDays ago\n      set_fact:\n        protectDate:\
          \ \"{{ '%Y-%m-%d' | strftime((ansible_date_time.epoch | int) - ((protectDays\
          \ | int) * 24 * 60 * 60)) }}\"\n    - name: Retrieve all versions of the\
          \ specified content view\n      uri:\n        url: \"{{ foremanUrl }}/katello/api/content_views\"\
          \n        method: GET\n        force_basic_auth: yes\n        url_username:\
          \ \"{{ foremanUser }}\"\n        url_password: \"{{ foremanPassword }}\"\
          \n        return_content: yes\n        body_format: json\n        status_code:\
          \ 200\n        validate_certs: \"{{ validate_certs }}\"\n      register:\
          \ contentViewResult\n\n    - name: get id of contentViewName={{ contentViewName\
          \ }}\n      set_fact:\n        contentViewId: \"{{ item.id }}\"\n      with_items:\
          \ \"{{ contentViewResult.json.results }}\"\n      when: item.name == contentViewName\n\
          \      no_log: \"{{ not doDebug }}\"\n\n    - name: Select the content view\
          \ with the lowest id\n      set_fact:\n        oldest_version: \"{{ contentViewResult.json.results\
          \ | selectattr('name', 'equalto', contentViewName) | map(attribute='versions')\
          \ | list | sort(attribute='id') | first | first }}\"\n\n    - name: Set\
          \ doDelete to false by default\n      set_fact:\n        doDelete: False\n\
          \    - name: Set doDelete to true if the last content view id has 'environment_ids'\
          \ [] and published date is older than protectDays\n      set_fact:\n   \
          \     doDelete: True\n      when: \n        - oldest_version.environment_ids\
          \ | length == 0\n        - oldest_version.published.split(' ')[0] < protectDate\n\
          \n    - name: Delete the version with lowest id={{ oldest_version.id if\
          \ oldest_version is defined and oldest_version is mapping else '' }}\n \
          \     uri:\n        url: \"{{ foremanUrl }}/katello/api/content_view_versions/{{\
          \ oldest_version.id if oldest_version is defined and oldest_version is mapping\
          \ else '' }}\"\n        method: DELETE\n        force_basic_auth: yes\n\
          \        url_username: \"{{ foremanUser }}\"\n        url_password: \"{{\
          \ foremanPassword }}\"\n        status_code: 202\n        validate_certs:\
          \ \"{{ validate_certs }}\"\n      register: deleteTask\n      when: doDelete\n\
          \n    - name: Print deleteTask\n      debug:\n        var: deleteTask\n\
          \      when: doDebug\n\n    - name: Poll the Foreman API to check the status\
          \ of the deletion\n      uri:\n        url: \"{{ foremanUrl }}/foreman_tasks/api/tasks/{{\
          \ deleteTask.json.id }}\"\n        method: GET\n        force_basic_auth:\
          \ yes\n        url_username: \"{{ foremanUser }}\"\n        url_password:\
          \ \"{{ foremanPassword }}\"\n        return_content: yes\n        body_format:\
          \ json\n        status_code: 200\n        validate_certs: \"{{ validate_certs\
          \ }}\"\n      register: deleteResult\n      until: deleteResult.json.state\
          \ == 'stopped'\n      retries: 30\n      delay: 10\n      when: doDelete\n\
          \n    - name: Print a message if there is no version to delete\n      debug:\n\
          \        msg: \"ContenView {{ contentViewName }} has no tailed versions\
          \ that are ready for deleting\"\n      when: not doDelete\n\n    - name:\
          \ Fail the playbook if there is no version to delete and failIfEmpty is\
          \ set to True\n      fail:\n        msg: \"No version to delete\"\n    \
          \  when: not doDelete and failIfEmpty == True\n\n    - name: Print debug\
          \ information if doDebug is set to True\n      debug:\n        msg: \n \
          \       - \"contentViewName={{ contentViewName }}\"\n        - \"oldest_version={{\
          \ oldest_version }}\"\n        - \"doDelete={{ doDelete }}\"\n        -\
          \ \"failIfEmpty={{ failIfEmpty }}\"\n        - \"protectDate={{ protectDate\
          \ }}\"\n        - \"oldest_version.published={{ oldest_version.published.split('\
          \ ')[0] }}\"\n      when: doDebug\n\n..."
        ansible-ssh-passphrase-option: option.password
        ansible-ssh-use-agent: 'false'
      description: ' contentViewVersionsHouseKeeping > cv_rhel9'
      nodeStep: true
      type: com.batix.rundeck.plugins.AnsiblePlaybookInlineWorkflowNodeStep
    - configuration:
        ansible-become: 'false'
        ansible-extra-vars: |
          ---
          contentViewName: 'cv_rocky9'
          failIfEmpty: False
          doDebug: False
          protectDays: "@option.ProtectDays@"
        ansible-playbook-inline: "---\n# Copyright (c) Chris Ruettimann <chris@bitbull.ch>\n\
          # This software is licensed to you under the GNU General Public License.\n\
          # There is NO WARRANTY for this software, express or\n# implied, including\
          \ the implied warranties of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR\
          \ PURPOSE. You should have received a copy of GPLv2\n# along with this software;\
          \ if not, see\n# http://www.gnu.org/licenses/gpl.txt\n# -----------------------------------------------------------------------\n\
          # This playbook is used to delete a specific version of a content view in\
          \ Foreman.\n# It first retrieves all versions of the content view, checks\
          \ if any version has no assigned CVS,\n# and if so, deletes the version\
          \ with the lowest id.\n# \n# Foreman API DOC: https://foreman.domain.tld/apidoc\n\
          # -----------------------------------------------------------------------\n\
          # Variables:\n# - validate_certs: Whether to validate SSL certificates.\
          \ Set to False if using self-signed certificates.\n# - foremanUser: The\
          \ username to authenticate with Foreman API.\n# - foremanPassword: The password\
          \ to authenticate with Foreman API.\n# - foremanUrl: The URL of the Foreman\
          \ server.\n# - contentViewName: The name of the content view to delete a\
          \ version from.\n# - failIfEmpty: Whether to fail the playbook if there\
          \ are no versions to delete.\n# - doDebug: Whether to print debug information.\n\
          # - protectDays: Never delete ContentViewVersion if newer than x days\n\
          # -----------------------------------------------------------------------\n\
          - hosts: localhost\n  gather_facts: yes\n#  vars:\n#    validate_certs:\
          \ False\n#    foremanUser: 'admin'\n#    foremanPassword: 'xxx'\n#    foremanUrl:\
          \ 'https://foreman.domain.tld'\n#    contentViewName: 'cv_rhel9'\n#    failIfEmpty:\
          \ False\n#    doDebug: True\n#    protectDays: 90\n  tasks:\n    - name:\
          \ Calculate the date protectDays ago\n      set_fact:\n        protectDate:\
          \ \"{{ '%Y-%m-%d' | strftime((ansible_date_time.epoch | int) - ((protectDays\
          \ | int) * 24 * 60 * 60)) }}\"\n    - name: Retrieve all versions of the\
          \ specified content view\n      uri:\n        url: \"{{ foremanUrl }}/katello/api/content_views\"\
          \n        method: GET\n        force_basic_auth: yes\n        url_username:\
          \ \"{{ foremanUser }}\"\n        url_password: \"{{ foremanPassword }}\"\
          \n        return_content: yes\n        body_format: json\n        status_code:\
          \ 200\n        validate_certs: \"{{ validate_certs }}\"\n      register:\
          \ contentViewResult\n\n    - name: get id of contentViewName={{ contentViewName\
          \ }}\n      set_fact:\n        contentViewId: \"{{ item.id }}\"\n      with_items:\
          \ \"{{ contentViewResult.json.results }}\"\n      when: item.name == contentViewName\n\
          \      no_log: \"{{ not doDebug }}\"\n\n    - name: Select the content view\
          \ with the lowest id\n      set_fact:\n        oldest_version: \"{{ contentViewResult.json.results\
          \ | selectattr('name', 'equalto', contentViewName) | map(attribute='versions')\
          \ | list | sort(attribute='id') | first | first }}\"\n\n    - name: Set\
          \ doDelete to false by default\n      set_fact:\n        doDelete: False\n\
          \    - name: Set doDelete to true if the last content view id has 'environment_ids'\
          \ [] and published date is older than protectDays\n      set_fact:\n   \
          \     doDelete: True\n      when: \n        - oldest_version.environment_ids\
          \ | length == 0\n        - oldest_version.published.split(' ')[0] < protectDate\n\
          \n    - name: Delete the version with lowest id={{ oldest_version.id if\
          \ oldest_version is defined and oldest_version is mapping else '' }}\n \
          \     uri:\n        url: \"{{ foremanUrl }}/katello/api/content_view_versions/{{\
          \ oldest_version.id if oldest_version is defined and oldest_version is mapping\
          \ else '' }}\"\n        method: DELETE\n        force_basic_auth: yes\n\
          \        url_username: \"{{ foremanUser }}\"\n        url_password: \"{{\
          \ foremanPassword }}\"\n        status_code: 202\n        validate_certs:\
          \ \"{{ validate_certs }}\"\n      register: deleteTask\n      when: doDelete\n\
          \n    - name: Print deleteTask\n      debug:\n        var: deleteTask\n\
          \      when: doDebug\n\n    - name: Poll the Foreman API to check the status\
          \ of the deletion\n      uri:\n        url: \"{{ foremanUrl }}/foreman_tasks/api/tasks/{{\
          \ deleteTask.json.id }}\"\n        method: GET\n        force_basic_auth:\
          \ yes\n        url_username: \"{{ foremanUser }}\"\n        url_password:\
          \ \"{{ foremanPassword }}\"\n        return_content: yes\n        body_format:\
          \ json\n        status_code: 200\n        validate_certs: \"{{ validate_certs\
          \ }}\"\n      register: deleteResult\n      until: deleteResult.json.state\
          \ == 'stopped'\n      retries: 30\n      delay: 10\n      when: doDelete\n\
          \n    - name: Print a message if there is no version to delete\n      debug:\n\
          \        msg: \"ContenView {{ contentViewName }} has no tailed versions\
          \ that are ready for deleting\"\n      when: not doDelete\n\n    - name:\
          \ Fail the playbook if there is no version to delete and failIfEmpty is\
          \ set to True\n      fail:\n        msg: \"No version to delete\"\n    \
          \  when: not doDelete and failIfEmpty == True\n\n    - name: Print debug\
          \ information if doDebug is set to True\n      debug:\n        msg: \n \
          \       - \"contentViewName={{ contentViewName }}\"\n        - \"oldest_version={{\
          \ oldest_version }}\"\n        - \"doDelete={{ doDelete }}\"\n        -\
          \ \"failIfEmpty={{ failIfEmpty }}\"\n        - \"protectDate={{ protectDate\
          \ }}\"\n        - \"oldest_version.published={{ oldest_version.published.split('\
          \ ')[0] }}\"\n      when: doDebug\n\n..."
        ansible-ssh-passphrase-option: option.password
        ansible-ssh-use-agent: 'false'
      description: ' contentViewVersionsHouseKeeping > cv_rocky9'
      nodeStep: true
      type: com.batix.rundeck.plugins.AnsiblePlaybookInlineWorkflowNodeStep
    keepgoing: false
    strategy: node-first
  timeZone: Europe/Zurich
  timeout: 2h
  uuid: 516e6583-e0d0-4052-8105-0f5defca7939
